swagger: '2.0'

info:
  title: Mainflux Auth API
  description: Mainflux IoT platform authentication and authorization service API.
  version: "1.0.0"

schemes:
  - http
  - https

consumes:
  - application/json

produces:
  - application/json

paths:
  /status:
    get:
      summary: Service health check.
      description: |
        The endpoint returns information about the service status, i.e. whether
        or not it is capable to respond to any incoming request.
      tags:
        - Status
      responses:
        200:
          description: Service is alive and able to respond to new requests.
          schema:
            $ref: '#/definitions/HealthCheck'
        500:
          description: Service cannot fulfill any further requests.
  /users:
    post:
      summary: Register new user account.
      description: |
        New accounts are registered given their username and password. Provided
        username must be platform-wide unique. Once the account is created, its
        unique identifier is generated together with new master key.
      tags:
        - Users
      parameters:
        - name: credentials
          in: body
          description: Account credentials.
          schema:
            $ref: '#/definitions/UserPass'
      responses:
        201:
          description: Account is created.
          schema:
            $ref: '#/definitions/Credentials'
        400:
          description: Missing or invalid username and/or password.
        409:
          description: Provided username is not unique.
        500:
          description: Service is unable to fulfill the request.
  /sessions:
    post:
      summary: Retrieves account's master key.
      description: |
        To retrieve their master keys, users are required to provide their
        username and password.
      tags:
        - Users
      parameters:
        - name: credentials
          in: body
          description: Account username and password.
          schema:
            $ref: '#/definitions/UserPass'
      responses:
        201:
          description: |
            Valid username and password submitted. The client has been provided with
            master key and an account ID.
          schema:
            $ref: '#/definitions/Credentials'
        400:
          description: Invalid request submitted.
        403:
          description: Missing or invalid username and/or password.
        500:
          description: Service is unable to fulfill the request.
  /api-keys:
    get:
      summary: Retrieves all keys created by the client.
      tags:
        - Users
      parameters:
        - name: key
          in: header
          description: Client's master key.
          type: string
          required: true
      responses:
        200:
          description: Retrieved a list of created keys.
          schema:
            $ref: '#/definitions/KeyList'
        403:
          description: Missing or invalid master key.
        500:
          description: Service is unable to fulfill the request.
    post:
      summary: Creates new API key.
      description: |
        An API key can be given to the user, device or channel. The consequence
        of this fact is that the owner's ID must be explicitly provided during key
        creation. It is allowed, but not mandatory, to limit the key scope at this
        point.
      tags:
        - Authorization
        - Authentication
      parameters:
        - name: key
          in: header
          description: Client's master key.
          type: string
          required: true
        - name: spec
          in: body
          description: Key specification containing its owner and scope(s).
          required: true
          schema:
            $ref: '#/definitions/KeySpec'
      responses:
        201:
          description: API key created.
          schema:
            $ref: '#/definitions/Key'
        403:
          description: Missing or invalid master key.
        500:
          description: Service is unable to fulfill the request.
  /api-keys/{jwt}:
    get:
      summary: Retrieves key info.
      description: |
        Retrieved data provides a key owner (user, device or channel ID), together
        with all actions key owner can perform.
      tags:
        - Authorization
        - Authentication
      parameters:
        - name: key
          in: header
          description: Client's master key.
          type: string
          required: true
        - name: jwt
          in: path
          description: The key.
          type: string
          required: true
      responses:
        200:
          description: Retrieved key info.
          schema:
            $ref: '#/definitions/Key'
        403:
          description: Missing or invalid master key.
        404:
          description: Non-existent key requested.
        500:
          description: Service is unable to fulfill the request.
    put:
      summary: Updates key scopes.
      description: |
        Updates the key scope by completely replacing the current scope with the
        provided one.
      tags:
        - Authorization
        - Authentication
      parameters:
        - name: key
          in: header
          description: Client's master key.
          type: string
          required: true
        - name: jwt
          in: path
          description: The key.
          type: string
          required: true
        - name: scopes
          in: body
          description: Key's scope specification.
          required: true
          schema:
            $ref: '#/definitions/KeySpec'
      responses:
        200:
          description: The key has been updated.
        400:
          description: Invalid key specification provided.
        403:
          description: Missing or invalid master key.
        404:
          description: Cannot update a non-existent key.
        500:
          description: Service is unable to fulfill the request.
    delete:
      summary: Revokes the key.
      description: Completely removes the key.
      tags:
        - Authorization
        - Authentication
      parameters:
        - name: key
          in: header
          description: Client's master key.
          type: string
          required: true
        - name: jwt
          in: path
          description: The key to be revoked.
          type: string
          required: true
      responses:
        204:
          description: The key has been revoked.
        403:
          description: Missing or invalid master key.
        404:
          description: Cannot revoke a non-existent key.
        500:
          description: Service is unable to fulfill the request.
  /access-checks:
    post:
      summary: Request an access to the platform resource.
      description: |
        This endpoint is used as an entrypoint to the protected system resources.
        The clients are required to provide a full access specification, regardless
        of their origin (e.g. HTTP, MQTT).
      tags:
        - Authorization
        - Authentication
      parameters:
        - name: key
          in: header
          description: Client's API key.
          type: string
          required: true
        - name: requestSpec
          in: body
          description: Resource access specification.
          schema:
            $ref: '#/definitions/AccessRequest'
      responses:
        200:
          description: Granted resource access.
        400:
          description: Missing or invalid access specification.
        403:
          description: Resource access is not allowed.
        500:
          description: Service is unable to fulfill the request.

definitions:
  HealthCheck:
    type: object
    required:
      - status
    properties:
      status:
        type: string
        enum:
          - OK
        description: Simple string indicating that the service is alive.
  AccessRequest:
    type: object
    required:
      - action
      - type
      - id
    properties:
      action:
        type: string
        enum:
          - R
          - W
          - X
        description: |
          Indicates the action client want to apply on targeted resource. An action
          can be R (read), W (write) or X (execute).
      type:
        type: string
        enum:
          - user
          - channel
          - device
        description: A type of accessed resource.
      id:
        type: string
        description: Unique resource identifier.
  UserPass:
    type: object
    required:
      - username
      - password
    properties:
      username:
        type: string
        description: Unique account username.
      password:
        type: string
        description: Arbitrary account password.
  Credentials:
    type: object
    required:
      - id
      - key
    properties:
      id:
        type: string
        format: uuid
        description: Auto-generated unique account identifier.
      key:
        type: string
        description: |
          Auto-generated account master key. This key can be used to access
          any resource owned by the created account.
  KeySpec:
    type: object
    required:
      - owner
    properties:
      owner:
        type: string
        format: uuid
        description: Unique owner identifier. Can refer to the channel, device or user.
      scopes:
        type: array
        description: An array of scopes accessible by the key owner.
        minItems: 0
        items:
          $ref: '#/definitions/Scope'
  Scope:
    type: object
    required:
      - actions
      - type
      - id
    properties:
      actions:
        type: string
        description: |
          A string containing any combination of R (read), W (write) and X (execute) permissions.
      type:
        type: string
        enum:
          - user
          - channel
          - device
        description: A type of resources affected by the scope.
      id:
        type: string
        description: Unique identifier of resource affected by the scope.
  Key:
    type: object
    required:
      - key
    properties:
      key:
        type: string
        description: A newly generated access key.
  KeyList:
    type: object
    required:
      - keys
    properties:
      keys:
        type: array
        items:
          type: string
        minItems: 0
        description: A list of access keys.
